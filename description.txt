在线词典

1. 需求功能
   * 产品要干什么
   * 使用方式

2. 技术分析

   * 需要什么网络并发模型: 多进程tcp
   * 两个界面如何跳转 （demo）
   * 存储 --> 数据库 （dict）
     设计数据表
        1. 需求存储：
        user: 用户名   密码
        create table user (id int primary key auto_increment,
         name varchar(30),
         passwd char(64)
         );

        words: 单词  单词解释

        history:单词  时间  user_id
         create table history (id int primary key auto_increment,
         word varchar(30),
         time datetime default now(),
         user_id int,
         foreign key (user_id) references user(id)
         );


3. 功能模块和封装

   * 哪些功能: 登录、注册、查单词、历史记录

   * 封装架构
        MVC

        请求展示    逻辑处理    数据提取处理

        模块划分
        dict_client.py: 发起请求，接受结果，呈现数据
        dict_server.py: 接收请求，逻辑处理，数据组织，发送响应
        dict_data.py: 获取需求，提取数据操作数据，提供数据

4. 通信协议设定

            请求类型        请求参量
   登录          L         name    passwd
   注册          R         name    passwd
   查单词        Q             word
   历史记录       H         name
   退出          E

5. 具体的模块逻辑

   * 搭建整体并发结构

   * 注册:
        客户端：
        输入用户名和密码 --> 发送请求 --> 等待结果(能否成功)
        --> OK:注册成功 / FAIL:回到一级界面

        服务端：
        接收请求 --> 请求的区分 --> 判断是否可以注册 --> 发送结果给客户端
        --> OK:将数据信息写入数据库 / FAIL:结束

    * 登录：
        客户端：
        输入用户名和密码 --> 发送请求 --> 等待结果
        --> OK:登录成功 / FAIL:回到一级界面

        服务端：
        接收请求 --> 判断是否可以登录 --> 发送结果给客户端
        --> OK:登录成功 / FAIL:结束

    * 查单词：
        客户端：
        输入单词 --> 发送单词（发送请求）--> 等待结果 --> 打印结果

        服务端：
        接收单词 --> 查询单词 --> OK：发送单词解释 / FAIL：发送 NOT FOUND

    * 查询历史记录：

